// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2L9hCuMqFA6xYDgKyhGrtm
// Component: I6xI5GMEjQdNix
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Btn from "../../Btn"; // plasmic-import: v4hszgxO9peNm/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_test_react.module.css"; // plasmic-import: 2L9hCuMqFA6xYDgKyhGrtm/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: I6xI5GMEjQdNix/css

export const PlasmicNavbar__VariantProps = new Array();

export const PlasmicNavbar__ArgProps = new Array();

function PlasmicNavbar__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__zrdLc)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__iEbvs)}>
          <p.PlasmicLink
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(projectcss.all, projectcss.a, sty.link)}
            component={Link}
            href={"/"}
            platform={"nextjs"}
            target={undefined}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"Ulysse"}
            </div>
          </p.PlasmicLink>
        </div>

        <p.PlasmicLink
          data-plasmic-name={"linkresume"}
          data-plasmic-override={overrides.linkresume}
          className={classNames(
            projectcss.all,
            projectcss.a,
            sty.linkresume,
            ""
          )}
          component={Link}
          href={
            "https://drive.google.com/file/d/1388lM4TbbkE6RVQluD_2ZiRAkqDirmb4/view?usp=sharing"
          }
          platform={"nextjs"}
          target={"_blank"}
        >
          <Btn
            data-plasmic-name={"btn"}
            data-plasmic-override={overrides.btn}
            behavior={"hug"}
            className={classNames("__wab_instance", sty.btn)}
            type={"primary"}
          >
            {"Resume"}
          </Btn>
        </p.PlasmicLink>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "link", "text", "linkresume", "btn"],
  link: ["link", "text"],
  text: ["text"],
  linkresume: ["linkresume", "btn"],
  btn: ["btn"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbar__ArgProps,
      internalVariantPropNames: PlasmicNavbar__VariantProps
    });

    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    text: makeNodeComponent("text"),
    linkresume: makeNodeComponent("linkresume"),
    btn: makeNodeComponent("btn"),
    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
