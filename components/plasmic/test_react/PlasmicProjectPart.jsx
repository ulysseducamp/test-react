// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2L9hCuMqFA6xYDgKyhGrtm
// Component: zn8FoPHtQ06VfQ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_test_react.module.css"; // plasmic-import: 2L9hCuMqFA6xYDgKyhGrtm/projectcss
import sty from "./PlasmicProjectPart.module.css"; // plasmic-import: zn8FoPHtQ06VfQ/css

export const PlasmicProjectPart__VariantProps = new Array();

export const PlasmicProjectPart__ArgProps = new Array("children", "slot");

function PlasmicProjectPart__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"titleStack3"}
        data-plasmic-override={overrides.titleStack3}
        className={classNames(projectcss.all, sty.titleStack3)}
      >
        <div className={classNames(projectcss.all, sty.freeBox___3XlCg)}>
          <div className={classNames(projectcss.all, sty.freeBox__wZlwX)}>
            {p.renderPlasmicSlot({
              defaultContents: "Brief",
              value: args.slot,
              className: classNames(sty.slotTargetSlot)
            })}
          </div>
        </div>
      </div>

      <div
        data-plasmic-name={"column"}
        data-plasmic-override={overrides.column}
        className={classNames(projectcss.all, sty.column)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__mmaEe)}>
          {p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sg1N0
                )}
              >
                {"Phase 1, Exploring/defining"}
              </div>
            ),

            value: args.children
          })}
        </div>
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "titleStack3", "column"],
  titleStack3: ["titleStack3"],
  column: ["column"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProjectPart__ArgProps,
      internalVariantPropNames: PlasmicProjectPart__VariantProps
    });

    return PlasmicProjectPart__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProjectPart";
  } else {
    func.displayName = `PlasmicProjectPart.${nodeName}`;
  }
  return func;
}

export const PlasmicProjectPart = Object.assign(
  // Top-level PlasmicProjectPart renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    titleStack3: makeNodeComponent("titleStack3"),
    column: makeNodeComponent("column"),
    // Metadata about props expected for PlasmicProjectPart
    internalVariantProps: PlasmicProjectPart__VariantProps,
    internalArgProps: PlasmicProjectPart__ArgProps
  }
);

export default PlasmicProjectPart;
/* prettier-ignore-end */
